/**
 * Header file for translation
 */

#ifndef __TRANSLATOR_H
#define __TRANSLATOR_H

#include <iostream>
#include <vector>
#include <list>
using namespace std;

/*
    sizes for different data types have been declared
    according to the x86 architecture
*/

#define __VOID_SIZE 0
#define __FUNCTION_SIZE 0
#define __CHARACTER_SIZE 1
#define __INTEGER_SIZE 4
#define __POINTER_SIZE 4
#define __FLOAT_SIZE 8

/*
    here are some class declarations
    symbol - symbol table entry
    SymType - type of element in the symbol table
    SymTable - data structure for symbol table
    quad - quads in three address code translation
    quadArr - entire list of quads
*/
class symbol;
class SymType;
class SymTable;
class quad;
class quadArr;

/*
    here is the list of the global variables
    currSymbol - Pointer to the current symbol
    currSt - Pointer to the currently active symbol table
    globalST - Pointer to the global symbol table
    quadList - list of generated quads
    STCount - variable for naming nested symbol tables
    blockName  - variable for naming nested blocks in symbol tables
*/
extern symbol *currSymbol;
extern SymTable *currSt;
extern SymTable *globalST;
extern quadArr quadList;
extern int STCount;
extern string blockName;

/*
    variables and functions generated by bison
*/
extern char *yytext;
extern int yyparse();

/*
    class SymType
    This class represents type of element in the symbol table
    Variables:
    type: string         type of the symbol
    width: int           size of array, and 1 in other cases(basic types)
    arrType: SymType*    For arrays, it points to the type of the elements in the array

    Methods:
    SymType(string type_, SymType* arrType_ = NULL, int width_ = 1)     Constructor
*/
class SymType
{
public:
    string type;
    int width;
    SymType *arrType;

    SymType(string type_, SymType *arrType_ = NULL, int width_ = 1);
};

/*
    class symbol
    This class represents entry/element in the symbol table
    Variables:
    name: string             name of the symbol
    type: SymType*           type of the symbol
    value: string            Initial value of the symbol, if any
    size: int                Size of the symbol(element)
    offset: int              Offset of the symbol in the symbol table
    nestedTable: SymTable*   Pointer to a nested symbol table, if any (useful for functions and blocks)

    Methods:
    symbol(string name_, string t = "int", SymType* arrType = NULL, int width = 0)      Constructor

    update(SymType* t): symbol*     Updates the contents of an existing symbol
*/
class symbol
{
public:
    string name;
    SymType *type;
    string value;
    int size;
    int offset;
    SymTable *nestedTable;

    symbol(string name_, string t = "int", SymType *arrType = NULL, int width = 0);
    symbol *update(SymType *t);
};

/*
    class SymTable
    This class represents the symbol table data structure
    Variables:
    name: string                name of the symbol
    tempCount: int              Count of temporary variables generated for the symbol table
    table: list<symbol>         List of all symbols present in the symbol table
    parent: SymTable*           Pointer to the parent of the symbol table, NULL for the global symbol table

    Methods:
    SymTable(string name_ = "NULL")     Constructor

    lookup(string name): symbol*        A method to lookup an id (given its name or lexeme) in the symbol table. If the id exists, the entry is returned, otherwise a new entry is created.

    gentemp(SymType* t, string initValue = ""): symbol*     A static method to generate a new temporary, insert it to the symbol table, and return a pointer to the entry

    print(): void       Prints the symbol table in a suitable fashion

    update(): void      Updates different fields of an existing entry
*/
class SymTable
{
public:
    string name;
    int tempCount;
    list<symbol> table;
    SymTable *parent;

    SymTable(string name_ = "NULL");

    symbol *lookup(string name);
    static symbol *gentemp(SymType *t, string initValue = "");

    void print();
    void update();
};

/*
    class quad
    This class represents the quad in the three address code
    Variables:
    op: string          Operator in the three address code
    arg1: string        First argument in the three address code
    arg2: string        Second argument in the three address code
    result: string      Result of the three address code

    Methods:
    quad(string res, string arg1_, string operation = "=", string arg2_ = "")       Constructor

    quad(string res, int arg1_, string operation = "=", string arg2_ = "")      Constructor

    quad(string res, float arg1_, string operation = "=", string arg2_ = "")        Constructor

    The multiple overloaded constructors help to instantiate quads with different kinds of operators and argument lists

    print(): void       Prints the quad in a suitable fashion

*/
class quad
{
public:
    string op;
    string arg1;
    string arg2;
    string result;

    quad(string res, string arg1_, string operation = "=", string arg2_ = "");
    quad(string res, int arg1_, string operation = "=", string arg2_ = "");
    quad(string res, float arg1_, string operation = "=", string arg2_ = "");

    void print();
};

/*
    class quadArr
    This class represents the entire list of quads generated
    Variables:
    quads: vector<quads>    A vector of all the quads generated

    Methods:
    print(): void   Prints the entire list of quads
*/
class quadArr
{
public:
    vector<quad> quads;

    void print();
};

/*
    class Array
    This class represents an array
    Variables:
    atype: string           Type of the array, either "arr" or "ptr"
    loc: symbol*            Location to compute address of the array
    Array: symbol*          Symbol table entry for the array
    type: SymType*          Type of the array generated, used for multidimensional arrays
*/
class Array
{
public:
    string atype;
    symbol *loc;
    symbol *Array;
    SymType *type;
};

/*
    class statement
    This class represents a statement
    Variables:
    nextlist: list<int>     Nextlist for the statement
*/
class statement
{
public:
    list<int> nextlist;
};

/*
    class expression
    This class represents an expression
    Variables:
    type: string                Type of the expression
    loc: symbol*                Pointer to the symbol table entry
    truelist: list<int>         Truelist for boolean expressions
    falselist: list<int>        Falselist for boolean expressions
    nextlist: list<int>         Nextlist for statement expressions
*/
class expression
{
public:
    string type;
    symbol *loc;
    list<int> truelist;
    list<int> falselist;
    list<int> nextlist;
};

/*
    An overloaded method to add a (newly generated) quad of the form: result = arg1 op arg2 where op usually is a binary operator.
    If arg2 is missing, op is unary. If op also is missing, this is a copy instruction.
    It is overloaded for different types of quads (int, float or string)
*/
void emit(string op, string result, string arg1 = "", string arg2 = "");
void emit(string op, string result, int arg1, string arg2 = "");
void emit(string op, string result, float arg1, string arg2 = "");

/*
    A global function to create a new list containing only i, an index into the array of quads,
    and to return a pointer to the newly created list
*/
list<int> makelist(int i);

/*
    A global function to concatenate two lists list1 and list2 and to return a pointer to the concatenated list
*/
list<int> merge(list<int> &list1, list<int> &list2);

/*
    A global function to insert address as the target label for each of the quads on the list l
*/
void backpatch(list<int> l, int address);

/*
    Checks compatibility of the types of the symbols s1 and s2
    Overloaded for symbol types also
*/
bool typecheck(symbol *&s1, symbol *&s2);
bool typecheck(SymType *t1, SymType *t2);

/*
    Converts a symbol of one type to another and returns a pointer to the converted symbol
*/
symbol *convertType(symbol *s, string t);

/*
    Converts an int to a string
*/
string convertIntToString(int i);

/*
    Converts a float to a string
*/
string convertFloatToString(float f);

/*
    Converts an int to a bool and adds required attributes
*/
expression *convertIntToBool(expression *expr);

/*
    Converts a bool to an int and adds required attributes
*/
expression *convertBoolToInt(expression *expr);

/*
    Changes the currently active symbol table to newTable
*/
void switchTable(SymTable *newTable);

/*
    returns count of the next instruction
*/
int nextinstr();

/*
    returns size of a type
*/
int sizeOfType(SymType *t);

/*
    prints a type
*/
string checkType(SymType *t);

#endif